%{
#include "hpp.hpp"
%}
%defines %union { Sym*o; }
%token <o> SYM NUM STR
%token <o> ADD SUB MUL DIV POW
%token <o> EQ AT TILD
%type <o> ex scalar

%left ADD SUB
%left MUL DIV
%left POW
%left PFX
%%
REPL : | REPL ex	{ cout << $2->dump() << endl; };
ex : scalar
	| ADD ex %prec PFX { $$=$2->pfxadd(); }
	| SUB ex %prec PFX { $$=$2->pfxsub(); }
	| ex EQ ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex ADD ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex SUB ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex MUL ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex DIV ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex POW ex		{ $$=$2; $$->push($1); $$->push($3); }
   ;
scalar : SYM | NUM | STR ;
%%
